scalar Date

type Transaction {
  id: Int!
  amount: Float!
  date: Date!
  description: String
  updatedAt: Date!
  reason: Reason!
}

type Reason {
  id: Int!
  text: String!
  updatedAt: Date!
}

input TransactionFilterInput {
  amountFrom: Float
  amountTo: Float
  dateFrom: String @constraint(format: "date")
  dateTo: String @constraint(format: "date")
  reason: Int
  offset: Int
  limit: Int
}

input TransactionInput {
  id: Int
  amount: Float
  date: String @constraint(format: "date")
  description: String
  reason: String
}

type Pagination {
  total: Int!
  offset: Int!
  limit: Int!
}

type TransactionResult {
  data: [Transaction]!
  pagination: Pagination!
}

type Query {
  reasons: [Reason]!
  transactions(input: TransactionFilterInput): [Transaction]!
  transactionById(id: Int!): Transaction
  totalPages(input: TransactionFilterInput): Int!
}

type Mutation {
  mutateTransaction(input: TransactionInput!): Transaction
}
