scalar Date

type Transaction {
  id: Int!
  amount: Float!
  date: Date!
  note: String
  updatedAt: Date!
  reason: Reason!
}

type Reason {
  id: Int!
  text: String!
  updatedAt: Date!
}

type Query {
  getReasons: [Reason!]
  getTransactions(
    fromDate: Date
    toDate: Date
    fromAmount: Int
    toAmount: Int
    reasonId: Int
    lastCursor: Int
    take: Int = 50
  ): [Transaction!]
}

type Mutation {
  createReason(text: String!): Reason
  updateReason(id: Int!, text: String!): Reason
  deleteReason(id: Int!): Boolean

  createTransaction(date: Date!, amount: Float!, reasonId: Int!, note: String): Transaction
  updateTransaction(id: Int!, date: Date, amount: Float, reasonId: Int, note: String): Transaction
  deleteTransaction(id: Int!): Boolean
}
