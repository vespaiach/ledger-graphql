scalar Date

type Transaction {
  id: Int!
  amount: Float!
  date: Date!
  description: String
  updatedAt: Date!
  reason: Reason!
}

type Reason {
  id: Int!
  text: String!
  updatedAt: Date!
}

input DateInput {
  dateFrom: String @constraint(format: "date")
  dateTo: String @constraint(format: "date")
}

input AmountInput {
  amountFrom: Float
  amountTo: Float
}

input TransactionInput {
  id: Int
  amount: Float
  date: String @constraint(format: "date")
  description: String
  reason: String
}

type Query {
  reasons: [Reason]!
  transactionsByDate(input: DateInput): [Transaction]!
  transactionsByReason(reasonId: Int!): [Transaction]!
  transactionsByAmount(input: AmountInput): [Transaction]!
}

type Mutation {
  mutateTransaction(input: TransactionInput!): Transaction
}
